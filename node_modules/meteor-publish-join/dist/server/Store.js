"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* global Meteor */

var Store = function () {
  function Store() {
    _classCallCheck(this, Store);

    this.joinArr = [];
    this.workerHandler = null;
  }

  _createClass(Store, [{
    key: "_findJoinIndex",
    value: function _findJoinIndex(join) {
      return this.joinArr.findIndex(function (j) {
        return j._id === join._id;
      });
    }
  }, {
    key: "_removeJoinAtIndex",
    value: function _removeJoinAtIndex(index) {
      if (index > -1) {
        this.joinArr.splice(index, 1);
      }
    }
  }, {
    key: "findSharedJoinByName",
    value: function findSharedJoinByName(name) {
      return this.joinArr.find(function (join) {
        return join.name === name && join.isShared;
      });
    }
  }, {
    key: "publishAllJoin",
    value: function publishAllJoin() {
      this.joinArr.forEach(function (join) {
        if (join && join.needPublish()) {
          Meteor.defer(function () {
            return join.publish();
          });
        }
      });
    }
  }, {
    key: "isJoinArrayEmpty",
    value: function isJoinArrayEmpty() {
      return this.joinArr.length === 0;
    }
  }, {
    key: "addJoin",
    value: function addJoin(join) {
      this.joinArr.push(join);
    }
  }, {
    key: "removeJoin",
    value: function removeJoin(join) {
      var joinIndex = this._findJoinIndex(join);

      this._removeJoinAtIndex(joinIndex);
    }
  }, {
    key: "setWorkerHandler",
    value: function setWorkerHandler(handler) {
      this.workerHandler = handler;
    }
  }, {
    key: "getWorkerHandler",
    value: function getWorkerHandler() {
      return this.workerHandler;
    }
  }]);

  return Store;
}();

exports.default = Store;