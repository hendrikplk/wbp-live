'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Join = require('./Join');

var _Join2 = _interopRequireDefault(_Join);

var _Store = require('./Store');

var _Store2 = _interopRequireDefault(_Store);

var _worker = require('./worker');

var _helpers = require('../helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* global Meteor, Mongo */

var server = {
  log: function log(msg, level) {
    if (level < 4) {
      console.error(msg);
    }
  }
};

function validate(data) {
  var context = data.context,
      name = data.name,
      interval = data.interval,
      doJoin = data.doJoin,
      maxWaiting = data.maxWaiting,
      isShared = data.isShared;

  // XXX: need to make sure context is an instance of Meteor subscription

  if (!(0, _helpers.isObject)(context)) {
    (0, _helpers.throwError)('PublishJoin: context must be an instance of subscription, e.g. this inside publication');
  }

  if (!(0, _helpers.isString)(name)) {
    (0, _helpers.throwError)('PublishJoin: name of a join must be a string');
  }

  // XXX: should there be any limits of interval?
  if (!(0, _helpers.isNumber)(interval)) {
    (0, _helpers.throwError)('PublishJoin: interval must be a number');
  }

  if (!(0, _helpers.isFunction)(doJoin)) {
    (0, _helpers.throwError)('PublishJoin: doJoin must be a function');
  }

  if (!(0, _helpers.isNumber)(maxWaiting) && !(0, _helpers.isUndefined)(maxWaiting)) {
    (0, _helpers.throwError)('PublishJoin: maxWaiting must be a number if provided');
  }

  if (!(0, _helpers.isBoolean)(isShared) && !(0, _helpers.isUndefined)(isShared)) {
    (0, _helpers.throwError)('PublishJoin: isShared must be a boolean if provided');
  }
}

function setUpOnStopHandlerForContext(_ref) {
  var context = _ref.context,
      join = _ref.join,
      store = _ref.store;

  context.onStop(function () {
    join.log('Removing the subscription ' + context._subscriptionId + ' on connection ' + (context.connection && context.connection.id) + ' by user ' + context.userId + ' from join ' + join._id, 6);
    join.removeContext(context);

    if (join.isContextsEmpty()) {
      join.log('Cleaning up empty join ' + join._id, 7);
      store.removeJoin(join);

      if (store.isJoinArrayEmpty()) {
        join.log('Stopping the publish worker', 5);
        (0, _worker.stopPublishWorker)(store, join.log);
      }
    }
  });
}

function isShareJoin(_ref2) {
  var isShared = _ref2.isShared;

  return !!isShared;
}

function setUpNormalJoin(store, data) {
  var needStartWorker = store.isJoinArrayEmpty();

  if (!data.log) {
    data.log = server.log;
  }

  var join = new _Join2.default(data);

  join.log('Initializing join ' + data.name + ' - ' + join._id + ' for subscription ' + data.context._subscriptionId + ' on connection ' + (data.context.connection && data.context.connection.id) + ' by user ' + data.context.userId, 6);
  store.addJoin(join);

  if (needStartWorker) {
    join.log('Starting the publish worker', 5);
    (0, _worker.startPublishWorker)(store);
  }

  return join;
}

function setUpSharedJoin(store, data) {
  var join = store.findSharedJoinByName(data.name);

  if (join) {
    join.log('Linking the existing join ' + join._id + ' to the subscription ' + data.context._subscriptionId + ' on connection ' + (data.context.connection && data.context.connection.id) + ' by user ' + data.context.userId, 6);
    join.addContext(data.context);
  } else {
    join = setUpNormalJoin(store, data);
  }

  return join;
}

if (typeof Meteor !== 'undefined' && Meteor.isServer) {
  var store = new _Store2.default();

  server.publish = function publish(data) {
    validate(data);

    var join = void 0;

    if (isShareJoin(data)) {
      join = setUpSharedJoin(store, data);
    } else {
      join = setUpNormalJoin(store, data);
    }
    join.log('The connection ' + (data.context.connection && data.context.connection.id) + ' on address ' + (data.context.connection && data.context.connection.clientAddress) + ' is using the user-agent ' + (data.context.connection && data.context.connection.httpHeaders['user-agent']), 7);

    setUpOnStopHandlerForContext({
      context: data.context,
      join: join,
      store: store
    });
  };
}

exports.default = server;